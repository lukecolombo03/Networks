#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

DATA_SIZE = 1375


# use hashlib to check if two packets have the same data
# takes in a hashcode and a packet as input
def check_hashes(recv_hash, our_packet):
    our_hash = hashlib.sha224(our_packet.get('data').encode()).hexdigest()
    return recv_hash == our_hash


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.in_flight = []  # [data, time]
        self.window = 6  # how many unACKed packets can be in flight at once
        self.seq_num = 0
        self.last_acked = -1  # the most recent packet to be ACKed
        self.waiting = False

    def log(self, message):
        sys.stderr.write(str(message) + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            # TODO: maybe change this to not use self.waiting, just check to see if we have window space
            sockets = [self.socket] if self.waiting else [self.socket, sys.stdin]
            socks = select.select(sockets, [], [], 0.1)[0]  # able to read from self.socket and system.in if we're not
            # waiting, just self.socket if we are waiting
            if len(self.in_flight) > 0 and time.time() > self.in_flight[0][1] + 1:  # if a packet was dropped
                self.in_flight[0][1] = time.time()
                msg = {"type": "msg", "data": self.in_flight[0][0].get('data'),
                       "sequence": self.in_flight[0][0].get('sequence')}
                self.send_with_msg(msg)
                self.waiting = True
            for conn in socks:
                if conn == self.socket:  # Read from receiver
                    k, addr = conn.recvfrom(65535)
                    msg_from_receiver = json.loads(k.decode('utf-8'))
                    self.log("Received message '%s'" % msg_from_receiver)
                    seq_nums_in_flight = [x[0].get('sequence') for x in self.in_flight]
                    self.log("needed ACKs: " + str(seq_nums_in_flight))

                    ack_num = msg_from_receiver.get('sequence')
                    self.log("Previous received ACK: " + str(self.last_acked))
                    if ack_num not in seq_nums_in_flight:
                        self.waiting = False
                        continue
                    elif ack_num == self.last_acked:  # DUPLICATE ACK - retransmit everything
                        self.log('DUPLICATE')
                        for entry in self.in_flight:
                            self.send_with_msg(entry[0])
                    else:   # filter in_flight so it only has numbers bigger than ack_num
                        self.in_flight = [x for x in self.in_flight if x[0].get('sequence') > ack_num]
                    self.last_acked = ack_num
                    self.waiting = False


                elif conn == sys.stdin:  # read from System.in and send to receiver
                    effective_wnd = self.window - len(self.in_flight)
                    for i in range(0, effective_wnd):
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0:
                            if len(self.in_flight) > 0:
                                self.waiting = True
                                break
                            else:
                                self.log("All done!")
                                sys.exit(0)
                        # hash = hashlib.sha224(data.encode()).hexdigest()
                        msg = {"type": "msg", "data": data, "sequence": self.seq_num}
                        self.send_with_msg(msg)
                        self.in_flight.append([msg, time.time()])
                        self.log("needed ACKs: " + str([x[0].get('sequence') for x in self.in_flight]))
                        self.seq_num += 1  # increment sequence number
                    self.waiting = True

        return

    def send_with_msg(self, packet):
        self.send(packet)
        self.log("Sending message '%s'" % (packet.get('data')[3:22]))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
